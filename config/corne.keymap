/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/*
 * Temporarily here because nice nano v2 spi is not defined on ZMk Yet
 * Source: https://github.com/zmkfirmware/zmk/blob/main/app/boards/shields/reviung41/boards/nice_nano.overlay
 * GitHub Issue: https://github.com/zmkfirmware/zmk/issues/885
 */

#include <dt-bindings/led/led.h>

&pinctrl {
    spi3_default: spi3_default {
        group1 {
            psels = <NRF_PSEL(SPIM_MOSI, 0, 6)>;
        };
    };

    spi3_sleep: spi3_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_MOSI, 0, 6)>;
            low-power-enable;
        };
    };
};

&spi3 {
  compatible = "nordic,nrf-spim";
  status = "okay";

  pinctrl-0 = <&spi3_default>;
  pinctrl-1 = <&spi3_sleep>;
  pinctrl-names = "default", "sleep";

  led_strip: ws2812@0 {
    compatible = "worldsemi,ws2812-spi";

    /* SPI */
    reg = <0>; /* ignored, but necessary for SPI bindings */
    spi-max-frequency = <4000000>;

    /* WS2812 */
    chain-length = <27>; /* number of LEDs */
    spi-one-frame = <0x70>;
    spi-zero-frame = <0x40>;
    color-mapping = <LED_COLOR_ID_GREEN
                          LED_COLOR_ID_RED
                          LED_COLOR_ID_BLUE>;
  };
};

/ {
	chosen {
		zmk,underglow = &led_strip;
	};
};

/ {
    macros {
        rgb_layer: rgb_layer {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_param_2to2 &rgb_ug RGB_COLOR_HSB_CMD MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&rgb_ug RGB_TOG>;

            label = "RGB_LAYER";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };

        shift: shift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFT";
        };
    };

    behaviors {
        rhold: rhold {
            compatible = "zmk,behavior-hold-tap";
            label = "RHOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        lhold: lhold {
            compatible = "zmk,behavior-hold-tap";
            label = "LHOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            tapping-term-ms = <200>;
        };

        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            bindings = <&shift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
        };
    };

    combos {
        compatible = "zmk,combos";

        shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <8 9>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp TAB         &kp Q  &kp W  &kp E  &kp R         &kp T        &kp Y          &kp U      &kp I      &kp O                      &kp P                   &rhold RIGHT_BRACKET LEFT_BRACKET
&kp LCTRL       &kp A  &kp S  &kp D  &kp F         &kp G        &kp H          &kp J      &kp K      &kp L                      &rhold COLON SEMICOLON  &rhold DOUBLE_QUOTES SQT
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C  &kp V         &kp B        &kp N          &kp M      &kp COMMA  &rhold EXCLAMATION PERIOD  &kp SLASH               &kp LG(SPACE)
                              &mo 1  &kp LEFT_ALT  &kp SPACE    &kp BACKSPACE  &kp ENTER  &mo 2
            >;
        };

        raise {
            bindings = <
&rhold TILDE GRAVE  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5    &kp NUMBER_6  &kp N7         &kp N8        &kp N9        &kp N0  &rhold MINUS EQUAL
&trans              &trans        &trans        &trans        &trans        &trans    &trans        &kp NUMBER_4   &kp N5        &kp NUMBER_6  &trans  &trans
&trans              &trans        &trans        &trans        &trans        &trans    &trans        &kp NUMBER_1   &kp NUMBER_2  &kp NUMBER_3  &trans  &trans
                                                &trans        &trans        &trans    &kp DELETE    &kp RIGHT_WIN  &mo 3
            >;
        };

        lower {
            bindings = <
&kp C_MENU_ESCAPE  &kp F1  &kp F2   &kp F3   &kp F4        &trans    &trans          &trans          &trans        &trans     &trans  &trans
&trans             &kp F5  &kp F6   &kp F7   &kp F8        &trans    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &trans  &trans
&trans             &kp F9  &kp F10  &kp F11  &kp F12       &trans    &trans          &trans          &trans        &trans     &trans  &trans
                                    &mo 3    &kp LEFT_WIN  &kp F5    &trans          &trans          &trans
            >;
        };

        layer_4 {
            bindings = <
&bt BT_CLR_ALL  &trans        &trans        &trans        &trans        &trans          &trans          &trans             &trans           &trans      &trans      &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp C_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT  &kp C_PLAY  &trans
&trans  &trans        &trans        &trans        &trans        &trans          &trans          &trans             &trans           &trans      &trans      &trans
                                    &trans        &trans        &trans          &trans          &trans             &trans
            >;
        };

        autoshift {
            bindings = <
&trans  &as Q  &as W  &as E   &as R   &as T     &as Y   &as U   &as I          &as O             &as P         &rhold LEFT_BRACE RIGHT_BRACE
&trans  &as A  &as S  &as D   &as F   &as G     &as H   &as J   &as K          &as L             &as COLON     &as TILDE
&trans  &as Z  &as X  &as C   &as V   &as B     &as N   &as M   &as LESS_THAN  &as GREATER_THAN  &as QUESTION  &kp RSHFT
                      &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
